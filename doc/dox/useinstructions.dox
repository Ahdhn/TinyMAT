/*!

\page page_useinstructions Usage/Linking Instructions

This page explains how to link against TinyMAT.


After building and installing TinyMAT you have all files that you need inside the instal directory:
  - \c <INSTALLDIR>/include contains all required header files
  - \c <INSTALLDIR>/bin contains the shared libraries
  - \c <INSTALLDIR>/lib contains the link libraries
  - \c <INSTALLDIR>/lib/cmake contains files necessary for CMake's \c find_package() to work
.

\tableofcontents


\section page_buildinstructions_CMAKE Use TinyMAT with CMake
When using CMake to build you application, you can simply use \c target_link_libraries() to link against TinyMAT and use CMake's \c find_package() to enable that:

\code{.cmake}
project(extcmake_tinymat_test CXX)
cmake_minimum_required(VERSION 3.0)

set(EXAMPLE_NAME extcmake_tinymat_test)

# if you built with CMake and Qt5 support, you also need to include these packages
find_package(Qt5 COMPONENTS Core REQUIRED)
find_package(OpenCV)

# now find libTinyMAT
find_package(libTinyMAT REQUIRED)

# add an executable
add_executable(${EXAMPLE_NAME} extcmake_tinymat_test.cpp)

# link against libTinyMAT
target_link_libraries(${EXAMPLE_NAME} libTinyMAT)

\endcode

Note that you may have to provide the CMake variables \c libTinyMAT_DIR (or \c libTinyMATShared_DIR\c ) to \c <INSTALLDIR>/lib/cmake/libTinyMAT so CMake finds the \c libTinyMATConfig.cmake file there.

\section page_buildinstructions_NOCMAKE Use TinyMAT without CMake
You can also link against TinyMAT without using CMake. For this you simply have to supply the library as a parameter to your compile/link run, e.g. for GCC:

\code{.sh}
    $ g++ main.cpp -o out -I<INSTALLDIR>/include -L<INSTALLDIR>/lib -lTinyMAT
\endcode

The \c -I -option provides the search directory for include-files (i.e. headers) and the \c -L -option the search path for the link libraries.

Note that you might also have to provide additional libraries, depending on your system.


*/